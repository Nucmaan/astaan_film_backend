version: '3.8'

services:
  #====== DATABASES ======#
  # User Service Database
  user-db:
    image: postgres:13
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 0616500191Fx
      POSTGRES_DB: users_db
    ports:
      - "5432:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped

  # Task Service Database
  task-db:
    image: postgres:13
    container_name: task-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 0616500191Fx
      POSTGRES_DB: tasks_db
    ports:
      - "5433:5432"
    volumes:
      - task-db-data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped

  # Project Service Database
  project-db:
    image: postgres:13
    container_name: project-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 0616500191Fx
      POSTGRES_DB: projects_db
    ports:
      - "5434:5432"
    volumes:
      - project-db-data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped

  # Payment Service Database
  payment-db:
    image: postgres:13
    container_name: payment-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 0616500191Fx
      POSTGRES_DB: payments_db
    ports:
      - "5435:5432"
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped

  # Chat Service Database
  chat-mongodb:
    image: mongo:4.4
    container_name: chat-mongodb
    ports:
      - "27017:27017"
    volumes:
      - chat-mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=groupChat
    networks:
      - backend-network
    restart: unless-stopped

  # Analytics Service Database
  analytics-mongodb:
    image: mongo:4.4
    container_name: analytics-mongodb
    ports:
      - "27018:27017"
    volumes:
      - analytics-mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=analytics_db
    networks:
      - backend-network
    restart: unless-stopped

  #====== REDIS INSTANCES ======#
  # User Service Redis
  user-redis:
    image: redis:6
    container_name: user-redis
    ports:
      - "6379:6379"
    networks:
      - backend-network
    restart: unless-stopped

  # Task Service Redis
  task-redis:
    image: redis:6
    container_name: task-redis
    ports:
      - "6380:6379"
    networks:
      - backend-network
    restart: unless-stopped

  # Project Service Redis
  project-redis:
    image: redis:6
    container_name: project-redis
    ports:
      - "6381:6379"
    networks:
      - backend-network
    restart: unless-stopped

  # Notification Service Redis
  notification-redis:
    image: redis:6
    container_name: notification-redis
    ports:
      - "6382:6379"
    networks:
      - backend-network
    restart: unless-stopped

  #====== MICROSERVICES ======#
  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      - user-db
      - user-redis
    environment:
      - PORT=8001
      - DB_USER=postgres
      - DB_PASS=0616500191Fx
      - DB_HOST=user-db
      - userDb_Name=users_db
      - JWT_SECRET=supersecretkey
      - REFRESH_SECRET=98739137923
      - NODE_ENV=development
      - REDIS_HOST=user-redis
      - ALLOWED_ORIGINS=http://localhost:8001,http://localhost:3000
      - FRONTEND_DOMAIN=http://localhost:3000
      - BASE_URL=http://localhost:8001
    ports:
      - "8001:8001"
    networks:
      - backend-network
    restart: unless-stopped

  # Task Service
  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: task-service
    depends_on:
      - task-db
      - task-redis
      - user-service
    environment:
      - PORT=8003
      - DB_USER=postgres
      - DB_PASS=0616500191Fx
      - DB_HOST=task-db
      - taskDb_Name=tasks_db
      - JWT_SECRET=supersecretkey
      - NODE_ENV=development
      - REDIS_HOST=task-redis
      - ALLOWED_ORIGINS=http://localhost:8003,http://localhost:3000
      - FRONTEND_DOMAIN=http://localhost:3000
      - BASE_URL=http://localhost:8003
    ports:
      - "8003:8003"
    networks:
      - backend-network
    restart: unless-stopped

  # Project Service
  project-service:
    build:
      context: ./project-service
      dockerfile: Dockerfile
    container_name: project-service
    depends_on:
      - project-db
      - project-redis
      - user-service
    environment:
      - PORT=8002
      - DB_USER=postgres
      - DB_PASS=0616500191Fx
      - DB_HOST=project-db
      - taskDb_Name=projects_db
      - JWT_SECRET=supersecretkey
      - NODE_ENV=development
      - REDIS_HOST=project-redis
      - ALLOWED_ORIGINS=http://localhost:8002,http://localhost:3000
      - FRONTEND_DOMAIN=http://localhost:3000
      - BASE_URL=http://localhost:8002
    ports:
      - "8002:8002"
    networks:
      - backend-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    depends_on:
      - payment-db
      - user-service
    environment:
      - PORT=8008
      - DB_USER=postgres
      - DB_PASS=0616500191Fx
      - DB_HOST=payment-db
      - userDb_Name=payments_db
      - NODE_ENV=development
      - ALLOWED_ORIGINS=http://localhost:8008,http://localhost:3000
      - FRONTEND_DOMAIN=http://localhost:3000
      - BASE_URL=http://localhost:8008
    ports:
      - "8008:8008"
    networks:
      - backend-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      - notification-redis
      - user-service
    environment:
      - PORT=8004
      - REDIS_HOST=notification-redis
      - NODE_ENV=development
      - ALLOWED_ORIGINS=http://localhost:8004,http://localhost:3000
    ports:
      - "8004:8004"
    networks:
      - backend-network
    restart: unless-stopped

  # Chat Service
  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    depends_on:
      - chat-mongodb
      - user-service
    environment:
      - PORT=8005
      - MONGODB_URL=mongodb://chat-mongodb:27017/groupChat
      - BASE_URL=http://localhost:8005
      - ALLOWED_ORIGINS=http://localhost:8005,http://localhost:3000
    ports:
      - "8005:8005"
    networks:
      - backend-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    depends_on:
      - analytics-mongodb
      - user-service
    environment:
      - PORT=8007
      - MONGODB_URL=mongodb://analytics-mongodb:27017/analytics_db
      - ALLOWED_ORIGINS=http://localhost:8007,http://localhost:3000
    ports:
      - "8007:8007"
    networks:
      - backend-network
    restart: unless-stopped

networks:
  backend-network:
    driver: bridge

volumes:
  user-db-data:
  task-db-data:
  project-db-data:
  payment-db-data:
  chat-mongodb-data:
  analytics-mongodb-data:
